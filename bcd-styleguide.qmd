---
# Metadaten / meta data
title: "Bausteine Computergestützter Datenanalyse"
subtitle: "Leitfaden zur Erstellung von Bausteinen"
author:
  - Lukas Arnold
  - Simone Arnold
  - Florian Bagemihl
  - Matthias Baitsch
  - Marc Fehr
  - Maik Poetzsch
  - Sebastian Seipel
date: today # "2024-03-05" Jahr-Monat-Tag / year-month-day

# Dokumenteneinstellungen / document options
engine: knitr # für eine einheitliche Codeausführung von Python und R im Styleguide - keine Relevanz für die Bausteine

## Spracheinstellungen / language settings
lang: de
language:
  de:
    crossref-imp-title: "Definition"
    crossref-imp-prefix: "Definition"
    crossref-lst-title: "Code-Block"
    crossref-lst-prefix: "Code-Block"
    crossref-nte-title: "Beispiel"
    crossref-nte-prefix: "Beispiel"
    crossref-tip-title: "Tipp"
    crossref-tip-prefix: "Tipp"
    crossref-wrn-title: "Hinweis"
    crossref-wrn-prefix: "Hinweis"

## Formatoption / formating options
format:
  html:
    ## Logo
    ### Logo in Quarto Books
    favicon: "skript/00-bilder/favicon_bcd_new.svg"
    
    ### Logo in HTML
    include-in-header:
      text: |
        <link rel="shortcut icon" href="skript/00-bilder/favicon_bcd_new.svg" />
        <link rel="icon" type="image/x-icon" href="logo.ico">
    
    default-image-extension: svg
    code-copy: true # hover is default
  pdf:
    cite-method: biblatex
    biblio-title: Quellen
    default-image-extension: pdf # Vektorgrafiken werden als PDF eingebunden / vector grafics are embedded as PDF

## Inhaltsverzeichnis / table of contents
toc: true
toc-title: Leitfaden zur Erstellung von Bausteinen
number-sections: true
number-depth: 2

## Bibliographie / bibliography
bibliography: bibliography.bib
biblio-style: authoryear

## Objekteinstellungen / object options
cap-location: bottom
fig-align: center

### Grafiken von R oder Matplotlib / Figures from R or Matplotlib
# Empfehlung von / suggestion from https://r4ds.hadley.nz/quarto#sec-figures
fig-width: 6
fig-asp: 0.618

---

&nbsp;

&nbsp;

::: {.border #Lizenz}

<!-- Die Lizenz wird manuell in einer Div erstellt, um Vorgaben für OER hinsichtlich Position und Format zu entsprechen. (licence key im YAML-Header funktioniert in PDF nicht.) -->

*Lizenzangabe mit maschinenlesbaren Icon nach TULLU(BA)-Regel + Jahr: Titel, Urhebende, Lizenz, Link zur Lizenz. Ursprungsort. (Bearbeitung). (Ausnahmen). Jahr*

:::: {layout="[20, 80]"}
![](skript/00-bilder/CC-BY){fig-alt="Symbol des Lizenzhinweises Creative Commons BY"} <!-- Grafik ohne Titel und Dateiendung einbinden -->  

Bausteine Computergestützter Datenanalyse. Leitfaden zur Erstellung von Bausteinen von Lukas Arnold, Simone Arnold, Florian Bagemihl, Matthias Baitsch, Marc Fehr, Maik Poetzsch und Sebastian Seipel ist lizensiert unter [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.de). Das Werk ist abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/bcd-styleguide). Ausgenommen von der Lizenz sind alle Logos Dritter und anders gekennzeichneten Inhalte. 2024

::::

Zitiervorschlag

Arnold, Lukas, Simone Arnold, Matthias Baitsch, Marc Fehr, Maik Poetzsch, und Sebastian Seipel. 2024. „Bausteine Computergestützter Datenanalyse. Leitfaden zur Erstellung von Bausteinen“. https://github.com/bausteine-der-datenanalyse/bcd-styleguide.

BibTeX-Vorlage

```
@misc{BCD-Styleguide-2024,
 title={Bausteine Computergestützter Datenanalyse. Leitfaden zur Erstellung von Bausteinen},
 author={Arnold, Lukas and Arnold, Simone and Baitsch, Matthias and Fehr, Marc and Poetzsch, Maik and Seipel, Sebastian},
 year={2024},
 url={https://github.com/bausteine-der-datenanalyse/bcd-styleguide}} 
```

:::

{{< pagebreak >}}

# Einleitung
Die Bausteine Computergestützter Datenanalyse wurden mit [Quarto](https://quarto.org/) erstellt. Quarto ist ein quelloffenes Publikationssystem, das die Programmiersprachen Python, R, Julia und Observable sowie verschiedene Publikationsformate wie HTML, PDF, MS Word oder ePub unterstützt. Dieses Dokument ist ein Leitfaden und Gestaltungsrichtlinie zur Bearbeitung und Neuerstellung von Bausteinen.

Nach einer kurzen Einführung zur Installation (@sec-Installation) und allgemeinen Nutzung von Quarto (@sec-Quarto-Markdown-Dateien) wird die Verwendung von Elementen wie Grafiken und Code-Blöcken in @sec-Elemente erläutert. Stilistische Hinweise sind dabei *kursiv* gesetzt.

# Installation {#sec-Installation}
Um Bausteine zu bearbeiten oder eigene Bausteine im Stil von BCD zu erstellen, benötigen Sie:

* eine lokale Installation von Quarto,
* eine Entwicklungsumgebung (VS Code, Jupyter, RStudio, Neovim, Text Editor) mit der jeweiligen Quarto-Erweiterung,
* eine Installation der Programmiersprachen Python und / oder R sowie
* die für die jeweilige Programmiersprache verwendeten Pakete. 

Siehe: [Quarto Get Started](https://quarto.org/docs/get-started/)

# Quarto Markdown Dateien {#sec-Quarto-Markdown-Dateien}
Quarto Markdown Dateien bestehen aus zwei Teilen: Dem YAML-Header und dem in Quarto Markdown geschriebenen Inhalt.

## YAML-Header
YAML ("YAML Ain’t Markup Language") ist eine Sprache zum Schreiben von Konfigurationsdateien. Der YAML-Header steht am Beginn einer Quarto Markdown Datei. Der YAML-Header enthält die Metadaten eines Dokuments, steuert die technische Ausführung der Dokumentenerstellung und konfiguriert global das Verhalten und Erscheinungsbild von Grafiken, Programmcode und anderen Elementen. Der YAML-Header wird mit `---` begonnen und beendet, Kommentare können mit einer `#` gesetzt werden.

### Metadaten
```
---
# Metadaten / meta data
title: "Bausteine Computergestützter Datenanalyse"
subtitle: "Leitfaden zur Erstellung von Bausteinen"
author:
  - Lukas Arnold
  - Simone Arnold
  - Florian Bagemihl
  - Matthias Baitsch
  - Marc Fehr
  - Maik Poetzsch
  - Sebastian Seipel
---
```

### Konfiguration
Für die Dokumentenerstellung können an unterschiedliche Formate angepasste Einstellungen vorgenommen werden. Auf die korrekte Einrückung zusammenhängender Blöcke ist zu achten.

```
format:
  html: # 2 Leerzeichen oder 1 Tab
    option: parameter # 4 Leerzeichen oder 2 Tabs
    option: parameter
  pdf:  
    option: parameter  
    option: parameter
```

#### Spracheinstellungen
`lang: de` setzt die Dokumentensprache auf Deutsch. Die Standardeinstellung ist Englisch: `lang: en`. Weitere Einstellungen können mit der Option `language` auch für mehrere Sprachen konfiguriert werden. Eine Liste der Optionen findet sich [auf GitHub](https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/language/_language.yml).

```
language:
  de:
    toc-title: Inhalt # Titel des Inhaltsverzeichnisses
  en:
    toc-title: Contents # title for table of contents
```

:::{#wrn-language .callout-warning appearance="simple"}
# Spracheinstellungen

```
crossref: 
  fig-title: Abbildung
  fig-prefix: Abbildung
  tbl-title: Tabelle
  tbl-prefix: Tabelle
  sec-prefix: Abschnitt
  ```
:::

### Quellenverwaltung und Zitation
*Die Quellen werden über eine Bibliografiedatei im Format BibLaTeX (`.bib`) verwaltet. Diese Datei wird im Arbeitsordner angelegt und im YAML-Header mit 'bibliography: bibliography.bib' eingebunden.*

Bibliografiedatei
: bibliography.bib

*In der Bibliografiedatei werden Einträge wie folgt abgelegt*:
```
# Printmedien
@book{Hemingway1952,
  title={The Old Man and the Sea},
  author={Hemingway, Ernest},
  year={1952},
  publisher={Charles Scribner's Sons},
  URL={https://www.testurl.com/testurl},
  urldate ={2000-12-31}
}

# Onlineressourcen
@online{Quarto-get-started,
author = {Quarto},
title = {Get Started},
year = {},
url = {https://quarto.org/docs/get-started/},
urldate = {2024-02-27}
}

# mehrere Autor:innen
@online{R-Markdown-Cookbook,
  author = {Xie, Yihui and Dervieux, Christophe and Rieder, Emily},
  title = {R Markdown Cookbook},
  year = {2024},
  url = {https://bookdown.org/yihui/rmarkdown-cookbook/},
  urldate = {2024-03-04}
}
```

Quarto nutzt Pandoc zur Formatierung von Zitaten und Quellennachweisen. Pandoc nutzt standardmäßig den [Chicago-Stil](https://www.chicagomanualofstyle.org/tools_citationguide.html), das Nachweise im Nummern- und im Autor-Jahr-System definiert. *In den Bausteinen werden Quellen im Autor-Jahr-System CMOS nachgewiesen.*

Zitierstil
: *Autor-Jahr-System* `biblio-style: authoryear` [CMOS Kurzanleitung](https://www.scribbr.com/chicago-style/author-date/)
: `@Hemingway1952` @Hemingway1952
: `[@Hemingway1952]` [@Hemingway1952]
: `[@Hemingway1952, 53]` [@Hemingway1952, 53]


&nbsp;

:::{#wrn-citation .callout-warning appearance="simple"}
# Quellennachweise

Das Erscheinungsbild des Quellenverzeichnisses unterscheidet sich in HTML und PDF leicht. 

*Ergänzen: bausteinübergreifende Quellenverwaltung.*  
Marc: Wenn man ein Quarto Projekt anlegt, kann man global den Pfad setzen.
:::

## Quarto Markdown
Quarto Markdown ist eine Erweiterung von Markdown, einer maschinenlesbaren Auszeichnungssprache für die Formatierung von Texten und weiteren Elementen wie Grafiken oder Programmcode. Eine Übersicht über die von Quarto Markdown unterstützten Formate bieten die [Quarto Hilfeseiten](https://quarto.org/docs/guide/). Quarto Markdown basiert auf Pandoc. Das [Pandoc Handbuch](https://pandoc.org/MANUAL.html#pandocs-markdown) kann bei spezifischen Fragen oder Problemen weiterhelfen.

### Elementspezifische Optionen
Das Verhalten und Erscheinungsbild einzelner Elemente kann abweichend von den globalen Einstellungen durch elementspezifische Optionen kontrolliert werden. Abhängig vom jeweiligen Element werden Optionen mit einer bestimmten Syntax übergeben:

* Codezellen werden durch führende Kommentarzeilen parametrisiert. (Anders als in R Markdown sollen Zelloptionen nicht in der geschweiften Klammer übergeben werden.)

  * In Python, R und Julia mit `#| option: parameter`

  * In Observable JavaScript mit `//| option: parameter`

* Objekte wie Überschriften, Callout Blocks, Divs, Grafiken und Tabellen werden mit geschweiften Klammern gesteuert `{option="parameter"}`

Die Konfigurationsmöglichkeiten werden in @sec-Elemente erläutert.

### Divs
Divs bieten vielfältige Möglichkeiten, Abschnitte zu formatieren. Divs werden mit mindestens drei Doppelpunkten `:::` eingeleitet und beendet (vier und mehr Doppelpunkte helfen bei verschachtelten Divs, den Üblick zu behalten). Optionen werden in geschweiften Klammern übergeben. Die folgende Div ...

``` {raw}
::: {layout-ncol=2}

Text in Spalte 1

Text in Spalte 2
:::

```

... erzeugt ein zweispaltiges Layout:

::: {layout-ncol=2}

Text in Spalte 1

Text in Spalte 2
:::


Siehe: [Quarto Divs](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)

Besondere Bedeutung haben Divs für:

* das Layout in mehreren Zeilen oder Spalten und die Abstandsformatierung (Ein Beispiel ist der Lizenzhinweis am Anfang des Dokuments). [Quarto Figure Panels](https://quarto.org/docs/authoring/figures.html#figure-panels)

* Layout von Code-Blöcken in einem [Tabset Panel](https://quarto.org/docs/interactive/layout.html#tabset-panel)

* Conditional Content zur formatabhängigen Einbindung von Inhalten. [Quarto Conditional Content](https://quarto.org/docs/authoring/conditional.html)

* Erweiterte Möglichkeiten für Querverweise. [Quarto Cross-Reference Div Syntax](https://quarto.org/docs/authoring/cross-references-divs.html)

* Sonderformate wie Callout Blocks (siehe @sec-Elemente).

### Programmcode
Quarto Markdown kann Code von verschiedenen Programmiersprachen ausführen: Python, R, Julia und Observable JavaScript. Dazu unterstützt Quarto die Engines Knitr und Jupyter zur dynamischen Berichterstellung. ([Quarto Frequently Asked Questions](https://quarto.org/docs/faq/#what-programming-languages-are-supported-in-quarto))

Python-Code wird mit Jupyter verarbeitet. Dazu muss eine lokale Installation von Python vorhanden sein. Die Installationsdatei sollte von der [Python Homepage](https://www.python.org/downloads/) bezogen werden.

![Jupyter Engine, [Quelle](https://quarto.org/docs/get-started/hello/vscode.html#how-it-works)](skript/00-bilder/Renderpfad_Jupyter.png){fig-alt="Darstellung des Renderpfads von Quarto Markdown zu Jupyter zu Markdown zu Pandoc zum gewünschten Format, z. B. PDF, Worddatei oder HTML."}

R-Code wird mit Knitr verarbeitet. Dazu muss eine lokale Installation von R vorhanden sein, in der die Pakete `knitr`, `rmarkdown` sowie für die Ausführung von Python-Code das Paket `reticulate` installiert sind.

![Knitr Engine, [Quelle](https://quarto.org/docs/get-started/hello/rstudio.html#how-it-works)](skript/00-bilder/Renderpfad_Knitr.png){fig-alt="Darstellung des Renderpfads von Quarto Markdown zu Knitr zu Markdown zu Pandoc zum gewünschten Format, z. B. PDF, Worddatei oder HTML."}

Wird in einem Quarto-Dokument sowohl Python- als auch R-Code benutzt, wird die Knitr Engine zur Erstellung des Dokuments verwendet.

Codeblöcke werden mit \`\`\` eingeschlossen und die zu verwendende Progammiersprache in geschweiften Klammern übergeben.

::: {.panel-tabset}
## Python-Code

\`\`\` {python}

print("Hello World from Python!")

\`\`\`

``` {python}
#| echo: false

print("Hello World from Python!")
```

## R-Code
\`\`\` {r}

print("Hello World from R!")

\`\`\`

``` {r}
#| echo: false
print("Hello World from R!")
```

:::

# Gestaltung von Elementen {#sec-Elemente}

## Text
Regulärer Text wird in [Markdownsyntax](https://quarto.org/docs/authoring/markdown-basics.html#overview) durch Sonderzeichen formatiert. Diese Sonderzeichen können durch ein vorangestellte Backslash `\` in der Ausgabe sichtbar gemacht werden. 

### Stylesheets
Mithilfe von eigenen Stylesheets in Form von .css oder .scss-Dateien lassen sich eine Vielzahl an Layoutoptionen in der HTML-Ausgabe anpassen [@W3Schools-Stylesheets]. Eine simple Einstellung wie 

``` {css}
.neuer-begriff { 
    color: green; 
    font-weight: bold; 
}
```

sorgt dafür, dass einzelne Wörter durch Verwendung von `[Beispielwort]{.neuer-begriff}` grün eingefärbt werden und fett gedruckt sind: [Beispielwort]{.neuer-begriff}. Dabei werden die Eigenschaften der geschweiften Klammer auf alle Inhalte der eckigen Klammer angewendet. Änderungen in der .css-Datei werden dann global auf alle Elemente angewendet, sodass diese nicht einzeln geändert werden müssen. Die Verwendung einer .css-Datei kann im YAML-Header geregelt werden.

```
format:
  html: 
    css: cssdatei.css
```

Damit diese Elemente auch in der PDF-Ausgabe funktionieren können diese Einstellungen analog in LaTeX definiert werden:
``` {.tex}
\newcommand{\neuerbegriff}{\textcolor{green}}
```
(Anmerkung: Dieses Beispiel ist lediglich grün, aber nicht fett gedruckt.)
Auch diese Verwendung wird über den YAML-Header geregelt.

```
format:
  pdf: 
    include-in-header:
      - macros.tex
```

Für eine fortgeschrittene Anwendungsmöglichkeit siehe @sec-callout-custom.
Eine kleine Auswahl an Beispielen für Stylesheets anderer Projekte mit unterschiedlichem Grad an Komplexität können hier gefunden werden:

- [R for data science](https://github.com/hadley/r4ds/blob/main/r4ds.scss)

- [Introduction to Modern Statistics HTML Stylesheet](https://github.com/OpenIntroStat/ims/blob/main/scss/ims-style.scss)

- [Introduction to Modern Statistics PDF/LaTeX Stylesheet](https://github.com/OpenIntroStat/ims/blob/main/latex/ims-style.tex)

## Callout Blocks
Callout Blocks eignen sich dazu, ausgewählte Inhalte hervorzuheben. Callout Blocks können umfangreich angepasst werden.

```
:::{.callout-note}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::
```
::::::{layout-ncol=2}

:::{.callout-note}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::

:::{.callout-tip}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::

:::{.callout-warning}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::

:::{.callout-caution}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::

:::{.callout-important}
Es gibt fünf Typen von callouts: 
`note`, `tip`, `warning`, `caution`, und `important`.
:::
::::::

::::: {.callout-important title="Auklappbarer Callout Block" collapse="true"}
`{.callout-important collapse="true"}` macht den Tipp in HTML aufklappbar, z. B. um Tipps zu Aufgaben zu geben. Wird das Argument `collapse=False` übergeben, ist der Callout Block zu Beginn aufgeklappt.

:::: {.callout-tip}
# Callouts können auch verschachtelt werden
Die erste Überschrift im Markdownformat wird als Titel benutzt, wenn keiner in der geschweiften Klammer mit dem Argument `title=Titel` spezifiziert wurde.

``` {raw}

:::: {.callout-tip}
# Callouts können auch verschachtelt werden
::::

```

::: {.callout-tip icon="false"}
# Das Symbol kann unterdrückt werden
`icon="false"`

:::
::::
:::::

Siehe dazu: [Quarto Callout Blocks](https://quarto.org/docs/authoring/callouts.html)

Callout Blocks werden mit der Spracheinstellung im YAML-Header lokalisiert.

``` {raw}
## Spracheinstellungen / language settings
lang: de
language:
  de:
    crossref-imp-title: "Definition"
    crossref-imp-prefix: "Definition"
    crossref-lst-title: "Code-Block"
    crossref-lst-prefix: "Code-Block"
    crossref-nte-title: "Beispiel"
    crossref-nte-prefix: "Beispiel"
    crossref-tip-title: "Tipp"
    crossref-tip-prefix: "Tipp"
    crossref-wrn-title: "Hinweis"
    crossref-wrn-prefix: "Hinweis"
```

Damit die Lokalisierung wirksam wird, muss für den  Callout Block eine ID vergeben werden. Die ID muss an erster Stelle stehen und besteht aus einer `#` und einem reservierten Kürzel (siehe @sec-Querverweise).

:::: {layout-ncol=2}
::: {.callout-important}
Callout Block vom Typ important ohne ID.  
`{.callout-important}`
:::

::: {#imp-ID .callout-important}
Callout Block vom Typ important mit ID.  
`{#imp-ID .callout-important}`
:::
::::


#### Definieren von eigenen Callout-Umgebungen {#sec-callout-custom}

Mit folgendem Vorgehen lassen sich eigene Callout-Umgebungen definieren wobei diese zum jetzigen Stand (April 2024) in der PDF farblich nicht anpassbar sind. 

Zu erst wird eine Ordnerstruktur für Quarto-Erweiterungen benötigt:

```
_extension
  - _extension.yml
  - callout_definition.lua
  - theme.scss
_quarto.yml
mein_dokument.qmd
```

Die _*extension.yml* listet dabei alle benutzten Filter auf, in diesem Fall *callout_definition.lua*. Hier lässt sich auch eine *.scss* Datei unterbringen, in der die Änderungen am Aussehen der HTML gepeichert sind. Diese werden dann in der Datei _quarto.yml mit *courseformat-html* aufgerufen.


```{.yaml}
title: Course Page Format
author: Marc Fehr
version: 1.0.0
contributes:
  formats:
    html:
      theme: [default, theme.scss]
  filters:
    - callout_definition.lua
```

Die Definition des Filters und damit der eigenen Callout-Umgebung sieht folgendermaßen aus:

```{.lua}
function Div(div)
  -- process exercise
  if div.classes:includes("callout-definition") then
    -- default title
    local title = "Definition"
    -- Use first element of div as title if this is a header
    if div.content[1] ~= nil and div.content[1].t == "Header" then
      title = pandoc.utils.stringify(div.content[1])
      div.content:remove(1)
    end
    -- return a callout instead of the Div
    return quarto.Callout({
      type = "definition",
      content = { pandoc.Div(div) },
      title = title,
      collapse = false
    })
  end
end
```
In der *theme.scss* wird dann die Darstellung der callout-Umgebung festgelegt. Da es sich hier um eine reine HTML Anpassung handelt, findet sich das Resultat nur in der HTML-Ausgabe und nicht in der PDF. Über die Hexadezimalwerte können dabei die Farben gesteuert werden. In der PDF erscheint ein solcher Callout-Block dann in der Farbe Hellgrau. Im letzten (auskommentierten) Abschnitt lässt sich ein Symbol (beispielsweise ein Ausrufezeichen für eine Warnung-Umgebung) festlegen. Dabei wird auf die *Font Awesome*-Bibliothek zurückgegriffen.

```{scss}
/*-- Importing fa icons --*/
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css");


/*-- scss:rules --*/

// Exercise callout styling
div.callout-definition.callout {
  border-left-color: #aea545;
}

div.callout-definition.callout-style-default > .callout-header {
  background-color: #474765;
}
/* Hier kann man ein Icon hinzufügen
.callout-definition > .callout-header::before {
  font-family: "Font Awesome 5 Free";
  content: "\f303";
  margin-right: 10px;
}
*/
```

### Verwendungsvorschlag Callout Blocks in den Bausteinen {#sec-Verwendungsvorschlag}

Callout Blocks sollten immer eine ID erhalten (siehe @sec-Querverweise).

:::{#nte-Beispiel .callout-note}
# Beispiel note
*`callout-note` für Beispiele*  
Querverweis mit `#nte-ID`
:::

:::{#imp-Beispiel .callout-important}
# Beispiel important
*`callout-important` für Definitionen - der definierte Begriff wird als Überschrift verwendet.* 
Querverweis mit `#imp-ID`
:::

:::{#tip-Beispiel .callout-tip collapse="true"}
## Beispiel tip
*`callout-tip` aufklappbar für Lösungshilfen und Lösungen*  
Querverweis mit `#tip-ID`
:::

:::{#wrn-Beispiel .callout-warning appearance="simple"}
# Beispiel warning
*`callout-warning appearance="simple"` für Hinweise*  
Querverweis mit `#wrn-ID`
:::

## Tabset Panel
[Tabset Panel](https://quarto.org/docs/interactive/layout.html#tabset-panel) erlauben die Präsentation von Inhalten in Reitern. Diese werden mit einer Div `{.panel-tabset}` gesetzt, innerhalb derer neue Reiter durch eine Überschrift hinzugefügt werden `## Python`. 

::: {.panel-tabset}

## Python
```{python}
#| output: false
#| results: hold # process code first, then print output

print("Hello World from Python!")
```

## R
```{r}
#| output: false
#| results: hold # process code first, then print output

print("Hello World from R!")
```

## Output
```{python}
#| echo: false
#| results: hold # process code first, then print output

print("Hello World from Python!")
```

```{r}
#| echo: false
#| results: hold # process code first, then print output

print("Hello World from R!")
```

## Grafik
``` {r}
#| echo: false
x = 1:10
y = x ** 2
plot(x, y, main = "eine Grafik")

```

:::

## Nummerierte Beschriftungen und Querverweise {#sec-Querverweise}
Um nummerierte Beschriftungen und Querverweise zu setzen, muss das Zielelement mit einer ID versehen werden. Elementen (z. B. Code-Blöcke, Grafiken, Überschriften) wird eine ID in geschweiften Klammern übergeben, die ID muss innerhalb der geschweiften Klammer an erster Stelle stehen und beginnt mit einer `#`, gefolgt von einem typabhängigen, reservierten Präfix. Anschließend folgt eine beschreibende Zeichenkette, um  das Zielelementen von anderen Elementen des gleichen Typs zu unterscheiden. Auf diese Weise werden auch Überschriften querverwiesen.

:::{#wrn-prefixlist .callout-warning appearance="simple" title="Hinweis reservierte Präfixe"}
In Quarto sind verschiedene Präfixe für die Erstellung von Querverweisen reserviert: fig, tbl, lst, tip, nte, wrn, imp, cau, thm, lem, cor, prp, cnj, def, exm, exr, sol, rem, eq, sec.
:::

Der Callout Block vom Typ Hinweis im Abschnitt @sec-Verwendungsvorschlag hat die ID `#nte-Beispiel`. Der Querverweis auf diesen Callout Block lautet `@nte-Beispiel`: @nte-Beispiel.

(Siehe dazu: [Quarto Cross References](https://quarto.org/docs/authoring/cross-references.html))

Grafiken erhalten das Präfix `fig`. In diesem Beispiel wird eine ID vergeben sowie die Größe der Grafik mit der Option `width` eingestellt:

`![](skript/00-bilder/working_code_CC0){#fig-programmieren width="33%"}`

![](skript/00-bilder/working_code_CC0){#fig-programmieren width="33%"}

Mit der ID kann ein Querverweis auf die Abbildung gesetzt werden: `@fig-programmieren` erzeugt den Querverweis @fig-programmieren. 

## Grafiken
Grafiken können lokal oder aus dem Internet eingebunden werden. Der lokale Dateipfad wird ausgehend vom aktuellen Arbeitsverzeichnis angegeben. Die Syntax lautet:

`![Grafiküberschrift](skript/00-bilder/Dateiname_Dateiname Dateiname.png)`  
`![Grafiküberschrift](https://beispiellink.de/einbild.png)`

::: {#wrn-absoluterpfad .callout-warning appearance="simple"}
## absolute Dateipfade vermeiden

Grafiken können mit einem absoluten Dateipfad (mit führendem `/`) oder mit einem relativen Dateipfad eingebunden werden.

  - absolut: `![Grafiküberschrift](/skript/00-bilder/Dateiname.png)`

  - relativ: `![Grafiküberschrift](skript/00-bilder/Dateiname.png)`

Das Einbinden über absolute Dateipfade ist fehleranfällig uns sollte vermieden werden.

:::

Speicherort Grafiken
: *Im Skript verwendete Grafiken werden im Unterordner "skipt/00-bilder" abgelegt.*
: *Für Aufgabenstellungen verwendete Grafiken werden im Unterordner "aufgaben/00-bilder" abgelegt.*

::: {#tip-arbeitsverzeichnis .callout-tip collapse="true"}
# Arbeitsverzeichnis ermitteln
Das aktuelle Arbeitsverzeichnis kann mit einem Codeblock mit dem entsprechenden Befehl angezeigt werden (hier ohne Ausgabe):

In R:
```{r}
#| output: FALSE
#| results: hold # process code first, then print output

print(getwd())
```

In Python: 
```{python}
#| output: false
#| results: hold # process code first, then print output

import os
print(os.getcwd())
```

:::

### Grafikoptionen
Grafikoptionen können global im YAML-Header definiert werden.

```
---
cap-location: bottom
fig-align: center
---
```

:::{#wrn-Beschriftung .callout-warning appearance="simple"}
# Grafiken ohne Beschriftung

![](skript/00-bilder/working_code_CC0){fig-alt="Eine Person programmiert am Computer" width="10%"}

Eine Grafik ohne Beschriftung oder `#fig-ID` folgt der globalen Einstellung nicht. Das obenstehende Bild steht in HTML linksbündig, obwohl im YAML-Header `fig-align: center` konfiguriert ist. Quarto unterscheidet intern zwischen unbeschrifteten Bildern (image) und beschrifteten Grafiken (figure). Siehe <https://github.com/quarto-dev/quarto-cli/issues/6509#issuecomment-1677657369>.

:::

Grafikoptionen können auch elementweise gesetzt werden. Optionen für einzelne Grafiken werden in geschweiften Klammern übergeben und mehrere Optionen durch Leerzeichen voneinander getrennt. Im folgenden Beispiel wird eine `#fig-ID` vergeben, ein Alternativtext mit `fig-alt=""` angelegt, die Ausrichtung mit `fig-align=""` linksbündig sowie die Größe der Grafik mit `width=""` eingestellt. `width` stellt die Breite der Grafik ein, die Höhe wird automatisch berechnet.

`![Grafik mit elementweiser Option "left"](skript/00-bilder/working_code_CC0.png){#fig-Grafik-mit-Optionen fig-alt="Eine Person programmiert am Computer" fig-align="left" width="33%"}`

![Grafik mit elementweiser Option "left"](skript/00-bilder/working_code_CC0.png){#fig-Grafik-mit-Optionen fig-alt="Eine Person programmiert am Computer" fig-align="left" width="33%"}

Grafiken
: *Globale Einstellungen zentriert* `fig-align: center`
: *Beschriftung unterhalb* `cap-location: bottom`
: *Einbindung mit* `#fig-ID` *und Alternativtext* `fig-alt="Alternativtext"` *(ausgenommen dekorative Grafiken)*

*Dekorative Grafiken werden ohne `fig-ID` eingebunden und erhalten ein Leerzeichen als Titel: `[&nbsp;](skript/00-bilder/Dateipfad)`. Nicht gemeinfreie Grafiken erhalten einen Lizenzhinweis nach der TULLU(BA)-Regel in einer umrahmten Div `::: {.border}`.*

![&nbsp;](skript/00-bilder/festmahl-PCL.svg){fig-alt="Dekoratives Bild einer am gedeckten Tisch sitzenden Gesellschaft aus vier Personen. Ein Mann ist aufgestanden, um einen Toast auszusprechen." width="50%"}

::: {.border}
Toast Dining Eating von OpenClipart-Vectors ist lizensiert unter [Pixabay Content License](https://pixabay.com/service/license-summary/). Das Werk ist abrufbar auf [Pixabay](https://pixabay.com/vectors/toast-dining-eating-event-festive-153723/). 2013
:::

### Nutzung von Vektorgrafiken
Die Bausteine sind für den Export in HTML und PDF konzipiert. Der Export von Grafiken nach PDF erfolgt über LaTeX und eine PDF-Renderengine. Somit werden nur Formate unterstützt, die in LaTex und in PDF unterstützt werden. Dies betrifft insbesondere

  * Vektorgrafiken: Um Vektorgrafiken im Format SVG zu verarbeiten, wird die Bibliothek `Librsvg` benötigt. Siehe: [Quarto: PDF Format Improvements](https://quarto.org/docs/prerelease/1.3/pdf.html). Werden SVG-Grafiken mit Dateiendung (titel.svg) eingebunden, wandelt Quarto die Bilder automatisch in das PDF-Format um.

  * GIF: Das PDF-Format unterstützt animierte Bilddateien nicht bzw. nur in bestimmten Kombinationen aus Renderengine und PDF Reader. Quartos Standardengine TinyteX unterstützt animierte Bilddateien nicht.

Das für Grafiken verwendete Format kann global im YAML-Header definiert werden.

```
format:
  html:
    default-image-extension: svg
  pdf:
    cite-method: biblatex
    default-image-extension: pdf
```

Dann können Grafiken ohne Dateiendung eingebunden werden. Quarto lädt dann automatisch das im YAML-Header definierte Dateiformat. `![Grafiküberschrift](Unterordner/Dateiname_ohne Dateiendung)` 


:::{.callout-warning appearance="simple"}
# Hinweis
Auf GitHub wandelt ein Skript alle SVG-Grafiken automatisch in PDF um. 
:::

### Flussdiagramme
Quarto unterstützt Graphviz und Mermaid zur Erzeugung von [Flussdiagrammen](https://quarto.org/docs/authoring/markdown-basics.html#diagrams). Wird Mermaid verwendet, sollte im YAML-Header ein alternatives theme konfiguriert werden, da das default theme sehr dunkle subgraphs erzeugt:

```
mermaid: 
  theme: neutral 

```

## Videos und H5P-Elemente
Speicherort von Videos
: *Unterordner im Arbeitsverzeichnis "videos"*

Die Syntax zur Einbindung von Videos lautet: 

```{raw}
# Allgemein
{{< video Dateipfad >}}

# Beispiel
{{< video https://www.youtube.com/watch?v=EImihZVE0sA >}}

```

::: {.border}
{{< video https://www.youtube.com/watch?v=EImihZVE0sA >}}

Open Educational Resources concept: What is an OER? von UNESCO ist lizensiert unter [CC-BY]( https://creativecommons.org/licenses/by/4.0/). Das Werk ist abrufbar auf [YouTube](https://www.youtube.com/watch?v=EImihZVE0sA).

:::

&nbsp;

### H5P-Elemente {-}
H5P-Elemente können exportiert als all-in-one HTML file eingebunden werden. Die Syntax lautet:

``` {raw}
{=html}
{{< include Beispiel.html >}}
```

## Programmcode
Code wird mit folgender Syntax eingebunden:

``` {python}
#| echo: fenced
print("Hallo Welt")
```

Dabei können verschiedene *Flags* gesetzt werden. Diese Flags können entweder lokal in der Programmierumgebung oder aber global in der yml-Datei gesetzt werden.

Mit *#| echo: false* (standartmäßig **true**) kann die Darstellung des Codes unterdrückt werden.

\`\`\` {python}  
#| echo: false  
print("Hallo Welt")  
\`\`\`

Im erzeugten Dokument wird dann nur die Ausgabe des Codes dargestellt (die folgende Codezelle wird nicht dargestellt):

```{python}
#| echo: false
print("Hallo Welt")
```

Im Gegensatz dazu bestimmt *#| output: false* (standartmäßig **true**), dass der Code ohne Ausgabe dargestellt werden soll.

```{python}
#| echo: fenced
#| output: false
print("Hallo Welt")
```

Mit *#| output: asis* wird der Code ohne umschließende Codezellen-Formatierung dargestellt:

```{python}
#| output: asis
print("Hallo Welt")
```

Für die Code-Ausführung mit knitr (R-Code, Python-Code via reticulate) bewirkt das Flag *#| results: hold* eine zusammenhängende Codeausführung.

::: {.panel-tabset}
## Python
``` {python}
# 2 Ausgaben mit Python
print("Ausgabe 1")
print("Ausgabe 2")
```

## Python results: hold
``` {python}
#| results: hold

# 2 Ausgaben mit Python und gesetztem Flag results: hold
print("Ausgabe 1")
print("Ausgabe 2")
```

## R
``` {r}
# 2 Ausgaben mit R
print("Ausgabe 1")
print("Ausgabe 2")
```

## R results: hold
``` {r}
#| results: hold

# 2 Ausgaben mit R und gesetztem Flag results: hold
print("Ausgabe 1")
print("Ausgabe 2")
```
:::

Quarto bietet darüber hinaus weitere Konfigurationsmöglichkeiten für die Präsentation von Programmcode ([siehe Dokumentation](https://quarto.org/docs/output-formats/html-code.html#overview)).

### Code kopieren

*Im YAML-Header wird per Option die Kopierfläche für Programmcode aktiviert.* (Standard ist das Sichtbarwerden beim Herüberfahren mit der Maus, code-copy: hover.)

``` {raw}
format:
  html:
    code-copy: true # hover is default
```

### Optionen für programmierte Grafiken
Die in den Bausteinen verwendeten Optionen zur Gestaltung programmierter Grafiken sind im folgenden Block kurz erläutert.

```
#| fig-cap: "Beschriftung"
#| label: fig-ID "ID für Querverweise"
#| fig-alt: "Alternativtext"
#| fig-width: "Breite der Grafik als lokale Einstellung, in der Priorität über globaler Einstellung im YAML-Header"
#| fig-height: "Höhe der Grafik als lokale Einstellung, in der Priorität über globaler Einstellung im YAML-Header"
#| fig-asp: "Seitenverhältnis der Grafik als lokale Einstellung, in der Priorität über globaler Einstellung im YAML-Header"
```

# Aufbau der Bausteine
Die Bausteine sind modular aufgebaut und bestehen aus drei Typen: Werkzeugbausteinen, Methodenbausteinen und Anwendungsbausteinen. 

  * Werkzeugbausteine vermitteln den Umgang mit den Programmierumgebungen Python und R, die Entwicklung von Pseudocode und die rechtlichen Grundlagen des Datenmanagements.

  * Methodenbausteine vermitteln allgemeine methodische Grundlagen für die Datenanalyse wie die Analyse von Geodaten und Zeitreihen, Statistik, numerische Verfahren oder Datenfitting.

  * Anwendungsbausteine vermitteln fachspezifische Inhalte wie die Auswertung von Sensordaten, Stadt- und Verkehrsplanung, Branddatenanalyse.

Neben den fachlichen Inhalten umfassen Methoden- und Anwendungsbausteine Codebeispiele für Python bzw. für R, die Studierenden die Bearbeitung von Übungsaufgaben und Projekten in der jeweiligen Programmierumgebung erlauben.

Die Bausteine folgen einem einheitlichen Aufbau:

* Voraussetzungen (eingebundene seperate Markdown-Datei)

  * Inhaltliche Voraussetzungen 

  * vorher zu bearbeitende Bausteine

  * verwendete Pakete und Datensätze / -quellen
  
  * geschätzte Bearbeitungszeit

* Lernziele: Wissen, Kompetenzen, Leitfragen(eingebundene seperate Markdown-Datei.)

* Inhalt (gerne abwechslungsreich gestalten)

  * Theorie

  * Beispiele

  * Übungen

* Das Wichtigste (vielleicht als Video)

* Lernzielkontrolle

  * Kompetenzquiz (ggf. aufklappbarer Callout Block, Textverweis für PDF, polierte Lösungen evntl. via Lumi später entscheiden)

  * Übungsaufgaben (kleine Projekte)

* Prüfungsaufgaben (ohne Lösungen)

## Ordnerstruktur
Die Ordnerstruktur für die Bausteine ist auf [GitHub dokumentiert](https://bausteine-der-datenanalyse.github.io/bcd-dokumentation/organisation.html).

## Sprache
Die Ansprache der Leser:innen erfolgt in der Höflichkeitsform "Sie / Ihr". Gegendert wird mit dem Doppelpunkt: Er:Sie ist Busfahrer:in. Es werden nur Personen gegendert. Nicht gegendert wird zum Beispiel: "die Anbieter von Plagiatserkennungssoftware". Die Anbieter sind Unternehmen.

Eine Alternative zum Gendern mit Doppelpunkt ist die Verlaufsform, z. B. "Studierende".

## Barrierefreiheit
Siehe [Checklisten Barrierefreiheit](https://digitale-lehre.uni-siegen.de/wp-content/uploads/2023/09/Checkliste_Barrierefreiheit-in-der-digitalen-Lehre_Sept23.pdf)
Checklisten: Barrierefreiheit in der digitalen Lehre. Hochschuldidaktik im digitalen Zeitalter.nrw; Kompetenzzentrum digitale Barrierefreiheit.nrw. CC BY 4.0.

# Quellenverzeichnis {-}
::: {#refs}
:::